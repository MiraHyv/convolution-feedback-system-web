(()=>{"use strict";function t(t){console.log(t)}class n{constructor(){this.fb=null,this.uniformPaikka=null;const t=this.haeKonteksti();null!=t&&(this.luoShader("#version 300 es\nout vec2 uv;\n\nconst vec4 kulmat[4] = vec4[4](\n    vec4(-1, -1, 0, 1),\n    vec4( 1, -1, 0, 1),\n    vec4(-1,  1, 0, 1),\n    vec4( 1,  1, 0, 1)\n);\n\nconst vec2 kulmat_uv[4] = vec2[4](\n    vec2(0, 0),\n    vec2(1, 0),\n    vec2(0, 1),\n    vec2(1, 1)\n);\n\nvoid main() {\n    vec4 t = vec4(0.9, 0.9, 1, 1);\n    gl_Position = t * kulmat[gl_VertexID];\n    uv = kulmat_uv[gl_VertexID];\n}\n","#version 300 es\nprecision highp float;\nin vec2 uv;\nuniform sampler2D tekstuuri0;\nuniform float[49] uData;\nout vec4 color;\n\nvoid main(void) {\n    color = texture(tekstuuri0, uv);\n}\n"),this.fb=t.createFramebuffer())}haeKonteksti(){return document.querySelector("#piirtoalue").getContext("webgl2")}kaannaShader(n,i){const o=this.haeKonteksti(),e=o.createShader(n);return o.shaderSource(e,i),o.compileShader(e),o.getShaderParameter(e,o.COMPILE_STATUS)?e:(n==o.VERTEX_SHADER?t("Vertex shaderin kääntäminen epäonnistui:\n"):n==o.FRAGMENT_SHADER&&t("Fragment shaderin kääntäminen epäonnistui:\n"),t(o.getShaderInfoLog(e)),o.deleteShader(e),null)}luoShader(n,i){const o=this.haeKonteksti(),e=this.kaannaShader(o.VERTEX_SHADER,n);if(null==e)return;const a=this.kaannaShader(o.FRAGMENT_SHADER,i);if(null==a)return;const r=o.createProgram();return o.attachShader(r,e),o.attachShader(r,a),o.linkProgram(r),o.getProgramParameter(r,o.LINK_STATUS)?(this.kaytaShaderia(r),this.uniformPaikka=o.getUniformLocation(r,"uData"),r):(t("Shaderin linkitys epäonnistui:\n"),t(o.getProgramInfoLog(r)),null)}kaytaShaderia(t){this.haeKonteksti().useProgram(t)}piirra(){const t=this.haeKonteksti();t.drawArrays(t.TRIANGLE_STRIP,0,4)}generoiKuva(){const t=this.haeKonteksti(),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);const i=t.RGBA,o=t.RGBA,e=t.UNSIGNED_BYTE,a=new Uint8Array(262144);let r=0;for(let t=0;t<256;t++)for(let t=0;t<256;t++){const n=t/256;let i=Math.pow(n,.5),o=n,e=.3+Math.pow(.7*n,1.5);const s=50,u=50;Math.random()*s<1&&(i=1),100*Math.random()<1&&(o=1),100*Math.random()<1&&(e=1),Math.random()*u<1&&(i=0),100*Math.random()<1&&(o=0),100*Math.random()<1&&(e=0),a[r]=Math.floor(256*i),a[r+1]=Math.floor(256*o),a[r+2]=Math.floor(256*e),a[r+3]=255,r+=4}return t.texImage2D(t.TEXTURE_2D,0,i,256,256,0,o,e,a),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),n}piirraKuva(t){const n=this.haeKonteksti();n.bindFramebuffer(n.FRAMEBUFFER,null),n.bindTexture(n.TEXTURE_2D,t),n.viewport(0,0,640,512),this.piirra()}piirraKuvaan(t,n){const i=this.haeKonteksti();i.bindFramebuffer(i.FRAMEBUFFER,this.fb),i.framebufferTexture2D(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,n,0),i.bindTexture(i.TEXTURE_2D,t),i.viewport(0,0,256,256),this.piirra()}asetaUniform(t){this.haeKonteksti().uniform1fv(this.uniformPaikka,t)}}const i="#version 300 es\nout vec2 uv;\n\nconst vec4 kulmat[4] = vec4[4](\n    vec4(-1, -1, 0, 1),\n    vec4( 1, -1, 0, 1),\n    vec4(-1,  1, 0, 1),\n    vec4( 1,  1, 0, 1)\n);\n\nconst vec2 kulmat_uv[4] = vec2[4](\n    vec2(0, 0),\n    vec2(1, 0),\n    vec2(0, 1),\n    vec2(1, 1)\n);\n\nvoid main() {\n    vec4 t = vec4(1, 1, 1, 1);\n    gl_Position = t * kulmat[gl_VertexID];\n    uv = kulmat_uv[gl_VertexID];\n}\n",o=new class{constructor(){this.tx_front=null,this.tx_back=null,this.convolutionMatrix=new Float32Array(49),this.shader_default=null,this.shader_convolution=null,this.piirto=null,this.setup()}setup(){this.piirto=new n,this.tx_front=this.piirto.generoiKuva(),this.tx_back=this.piirto.generoiKuva(),this.shader_default=this.piirto.luoShader(i,"#version 300 es\nprecision highp float;\nin vec2 uv;\nuniform sampler2D tekstuuri0;\nout vec4 color;\n\nvoid main(void) {\n    color = texture(tekstuuri0, uv);\n}\n"),this.shader_convolution=this.piirto.luoShader(i,"#version 300 es\nprecision highp float;\nuniform float[49] uData;\nin vec2 uv;\nuniform sampler2D tekstuuri0;\nout vec4 color;\n\nvoid main(void) {\n    float value = 0.0;\n    vec4 color0 = texture(tekstuuri0, uv);\n    for(int i=0; i<49; i++) {\n        int y = i / 7;\n        int x = i % 7;\n        float yf = float(y);\n        float xf = float(x);\n        vec2 d = vec2( (xf-3.0)/(512.0), (yf-3.0)/(512.0));\n        value += texture(tekstuuri0, uv + d).r * uData[i];\n    }\n    color = mix(color0, vec4(value, value, value, 1), 0.05);\n}\n"),this.randomizeConvolution(),this.piirto.asetaUniform(this.convolutionMatrix)}randomizeConvolution(){for(let t of this.convolutionMatrix){for(let t=0;t<this.convolutionMatrix.length;t++)this.convolutionMatrix[t]=4*Math.random()-2;this.normalizeConvolution()}console.log(this.convolutionMatrix)}normalizeConvolution(){let t=0;for(const n of this.convolutionMatrix)t+=n;let n=1/t;for(let t=0;t<this.convolutionMatrix.length;t++)this.convolutionMatrix[t]*=n}update(){this.randomChangeConvolution(),this.piirto.kaytaShaderia(this.shader_convolution),this.piirto.asetaUniform(this.convolutionMatrix),this.piirto.piirraKuvaan(this.tx_front,this.tx_back),this.piirto.piirraKuvaan(this.tx_back,this.tx_front),this.piirto.kaytaShaderia(this.shader_default),this.piirto.piirraKuva(this.tx_front)}randomChangeConvolution(){const t=Math.floor(4*Math.random())+1;for(let n=0;n<t;n++){const t=Math.floor(49*Math.random());this.convolutionMatrix[t]+=.02*Math.random()-.01,this.convolutionMatrix[t]<-1&&(this.convolutionMatrix[t]=-1),this.convolutionMatrix[t]>1&&(this.convolutionMatrix[t]=1)}this.normalizeConvolution()}};!function t(){o.update(),requestAnimationFrame(t)}()})();